package com.capgemini.ui;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.math.BigInteger;
import java.util.Random;

import com.capgemini.dto.DiagnosticCenter;
import com.capgemini.exception.HealthCareException;
import com.capgemini.dto.*;
import com.capgemini.service.HealthCareServiceImpl;
import com.capgemini.service.Validation;
import com.capgemini.util.*;

@SuppressWarnings("unused")
public class HealthCareController {
	
	public static void main(String[] args) throws IOException {
		
		HealthCareServiceImpl si = new HealthCareServiceImpl();
		Validation v = new Validation();
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		System.out.println(" Welcome to PBP Health Care Portal");
		System.out.println("===================================");
		System.out.println("Specify Your Role");
		System.out.println("1. Admin");
		System.out.println("2. User");
		System.out.println("Enter any other key to EXIT");

		String role = br.readLine();
		
		switch(role){
		
		case "1"://ENTERING ADMIN MENU
		while(true)
		{	
			System.out.println(" Welcome to ADMIN Panel");
			System.out.println("------------------------");
			System.out.println("1. ADD CENTER");
			System.out.println("2. REMOVE CENTER");
			System.out.println("3. ADD TEST");
			System.out.println("4. REMOVE TEST");
			System.out.println("5. VIEW CENTERS");
			System.out.println("6. VIEW ALL CENTER DETAILS");
			System.out.println("Enter any other key to EXIT");
			String choice = br.readLine();
			
			switch(choice)
			{
	
			case "1"://ADD CENTER
				
				System.out.println("\n*Note:| Center name should not be blank             |\n      | fist letter should be capital Alphabet only |\n      | Name should not be there in Center list     |");
				System.out.println("\nEnter Center Name");
				while(true)
				{
				String centerName=br.readLine();

				if(v.validateCenterName(centerName))
				{
					si.addCenter(new DiagnosticCenter(HealthCareDataBase.centerAutogeneratedId(),centerName)); //calling the addCenter method of the serviceImplementation class.
					System.out.println("Center added sucessfully");
					break;	
				}
				else
				{
					System.out.println("\nEnter the Center Name again keeping view of above *Note");
				}
				}
				break;
				
			case "2"://REMOVE CENTER
				
				System.out.println();
				si.viewCenters(); //displaying all Centers
				System.out.println("\n*Note: Center Id should be there in Center list");
				System.out.println("\nEnter the id of the center from the above centers list to delete");
				while(true)
				{
				String centerId = br.readLine();
				if(v.validateCenterId(centerId))
				{
					DiagnosticCenter centerObject = si.getCenterObjectOfcenterId(centerId); //getting the centerObject corresponding to the centerId.
					si.removeCenter(centerObject); //calling the removeCenter method of the serviceImplementation class.
					System.out.println("Center removed successfully");
					break;
				}
				else
				{
					System.out.println("Enter the center Id again that exist in the center list.");
				}
				}
				break;
				
			case "3"://ADD TEST
				
				System.out.println();
				si.viewCenters();  //displaying all Centers
				System.out.println("\nEnter the id of the center from the above centers to add the test in that corressponding center");
				while(true)
				{
				String center_Id = br.readLine();
				if(v.validateCenterId(center_Id))
				{
				System.out.println("\n*Note:| Test name should not be blank               |\n      | fist letter should be capital Alphabet only |\n      | Name should not be there in Test list       |");
				System.out.println("Enter the test name you want to add");
				while(true)
				{
				String testName = br.readLine();
				DiagnosticCenter centerObject = si.getCenterObjectOfcenterId(center_Id); //getting the centerObject corresponding to the centerId.
				if(v.validateCenterTest(centerObject,testName)) 
				{
				si.addTest(centerObject,new Test(HealthCareDataBase.testAutogeneratedId(),testName));//here addTest of the HealthCareServiceImpl class is taking two parameters one is the object of the centerArraylist and the other parameter is the name of the test to add in that center.
				System.out.println("Test successfully added to the "+centerObject.getCenterName());
				break;
				}
				else
				{
					System.out.println("\nEnter the test name that you want to add which does not exist in "+centerObject.getCenterName());
				}
				}
				break;
				}
				else
				{
					System.out.println("\nEnter the id of the center that exists in the center list");
				}
				}
				break;
				
			case "4"://REMOVE TEST
				
				System.out.println();
				si.viewCenters(); //displaying all Centers
				System.out.println("Enter the id of the center from the above centers to remove their corressponding test");
				while(true)
				{
				String center_id = br.readLine();
				if(v.validateCenterId(center_id))
				{
				si.viewCenterRepectiveTests(center_id); //displaying Tests corresponding to centerId
				System.out.println("\nEnter the id of the test from the above respective center tests to remove the test");
				while(true)
				{
				String test_Id = br.readLine();
				DiagnosticCenter centerObject = si.getCenterObjectOfcenterId(center_id); //getting the centerObject corresponding to the centerId.
				if(v.validateCenterTestId(centerObject,test_Id))
				{
					Test t = si.getTestObject(centerObject,test_Id); //getting the TestObject corresponding to the TestId.
					si.removeTest(centerObject, t); //calling the removeTest method of the serviceImplementation class.
					System.out.println("Test Successfully removed from "+si.getCenterObjectOfcenterId(center_id).getCenterName());
					break;
				}
				else
				{
					System.out.println("\nEnter the test id that you want to delete which exists in "+centerObject.getCenterName()+"test list");
				}
				}
				break;
				}
				else
				{
					System.out.println("\nEnter the id of the center that exists in the center list");
				}
				}
				break;
				
			case "5"://DISPLAY ALL CENTERS
				System.out.println();
				si.viewCenters();
				break;
				
			case "6"://DISPLAY ALL CENTERS WITH CORRESPONDING TESTS
				System.out.println();
				si.viewCentersAndTests();
				break;
				
			default://EXIT
				System.out.println("Exiting...Thank You !");
				System.exit(1);
				break;
			}
		}
		//(ADMIN) end
		
		case "2"://ENTERING USER MENU
			while(true){
			System.out.println(" Welcome to USER panel");
			System.out.println("-----------------------");
			System.out.println("1. Make Appointment");
			System.out.println("2. View Appointment");
			System.out.println("Enter any other key to Exit !");
			
			String UserChoice = br.readLine();
			
			switch (UserChoice) {
			case "1"://MAKE APPOINTMENT
				si.viewCenters(); //displaying all Centers
				System.out.println("Enter Center ID :");
				while(true) {
					String center_id = br.readLine();
				if(v.validateCenterId(center_id))
				{
					si.viewCenterRepectiveTests(center_id); //displaying Tests corresponding to centerId
					DiagnosticCenter Center = si.getCenterObjectOfcenterId(center_id); //getting the centerObject corresponding to the CenterId.
					System.out.println("Enter Test ID");
						while(true) {
								String test_Id = br.readLine();
								if(v.validateCenterTestId(Center, test_Id)) {
										Test test = si.getTestObject(Center, test_Id); //getting the TestObject corresponding to the TestId.
										
										System.out.println("Enter Date as (MM/DD/YYYY)");
										
										while(true) { 
										String date = br.readLine();
							
										if(v.validateDate(date))
										{
										boolean approved = true;
										BigInteger AppointmentID = generateRandom();
										System.out.println("Appointment Taken");
										System.out.println();
										si.makeAppointment(AppointmentID,Center, test, date, approved); //calling the makeAppointment method of the serviceImplementation class.
										break;
										}
										else{
											System.out.println("Enter Valid Date as (MM/DD/YYYY");
										}
								}
										break;
								}
								else
									System.out.println("Enter the Test Id again that exist in the center");
								
						}break;
				}
				else
				{
					System.out.println("Enter the center Id again that exist in the center list.");
				}
				
				}break;
				
			case "2"://VIEW APPOINTMENTS
				si.viewAppointments(); //displaying all appointments by calling the viewAppointment method of the serviceImplementation class.
				System.out.println();
				break;
			
			default://EXIT
				System.out.println("Exiting...Thank You !");
				System.exit(1);
				break;
			}
			}//while end
			default://EXIT PORTAL
				System.out.println("Exiting Portal..");
				System.exit(1);
				break;
		}
		
	}

	public static BigInteger generateRandom() {
		BigInteger maxLimit = new BigInteger("1000000");
		BigInteger minLimit = new BigInteger("100000");
		BigInteger bigInteger = maxLimit.subtract(minLimit);
		Random randNum = new Random();
		int len = maxLimit.bitLength();
		BigInteger res = new BigInteger(len, randNum);
		return res;

	}
	
}
